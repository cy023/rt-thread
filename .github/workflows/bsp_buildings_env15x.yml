name: RT-Thread BSP Static Build Check (Env 1.5.x)

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the RT-Thread organization master branch
on:
  # Runs at 16:00 UTC (BeiJing 00:00) every day
  schedule:
    - cron:  '0 16 * * *'
  push:
    branches:
      - master
    paths-ignore:
      - documentation/**
      - '**/README.md'
      - '**/README_zh.md'
  pull_request:
    branches:
      - master
    paths-ignore:
      - documentation/**
      - '**/README.md'
      - '**/README_zh.md'
  repository_dispatch:
    types:
      - online-pkgs-static-building-trigger-event
  workflow_dispatch:

permissions:
  contents: read # to fetch code (actions/checkout)

jobs:
  build:
    runs-on: ubuntu-latest
    name: ${{ matrix.legs.RTT_BSP }}
    if: github.repository_owner == 'RT-Thread'
    strategy:
      fail-fast: false
      matrix:
       legs:
         -  RTT_BSP: "RT-Thread Online Packages (STM32F407 RT-Spark)"
            RTT_TOOL_CHAIN: "sourcery-arm"
            SUB_RTT_BSP:
                - "stm32/stm32f407-rt-spark"
         -  RTT_BSP: "RTduino/Arduino Libraries (STM32F412 Nucleo)"
            RTT_TOOL_CHAIN: "sourcery-arm"
            SUB_RTT_BSP:
                - "stm32/stm32f412-st-nucleo"
         -  RTT_BSP: "RTduino/Arduino Libraries (Raspberry Pico)"
            RTT_TOOL_CHAIN: "sourcery-arm"
            SUB_RTT_BSP:
                - "raspberry-pico"
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8

      - name: Install Tools
        shell: bash
        run: |
          wget https://raw.githubusercontent.com/RT-Thread/env/v1.5.x/install_ubuntu.sh
          chmod 777 install_ubuntu.sh
          ./install_ubuntu.sh
          git config --global http.postBuffer 524288000
          python -c "import tools.menukconfig; tools.menukconfig.touch_env()"
          echo "RTT_ROOT=${{ github.workspace }}" >> $GITHUB_ENV
          echo "RTT_CC=gcc" >> $GITHUB_ENV

      - name: Install Arm ToolChains
        if: ${{ matrix.legs.RTT_TOOL_CHAIN == 'sourcery-arm' && success() }}
        shell: bash
        run: |
          wget -q https://github.com/RT-Thread/toolchains-ci/releases/download/v1.3/gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2
          sudo tar xjf gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2 -C /opt
          /opt/gcc-arm-none-eabi-10-2020-q4-major/bin/arm-none-eabi-gcc --version
          echo "RTT_EXEC_PATH=/opt/gcc-arm-none-eabi-10-2020-q4-major/bin" >> $GITHUB_ENV

      - name: Bsp Scons Compile
        if: ${{ success() }}
        shell: bash
        env:
          RTT_BSP: ${{ matrix.legs.RTT_BSP }}
          RTT_TOOL_CHAIN: ${{ matrix.legs.RTT_TOOL_CHAIN }}
          SRTT_BSP: ${{ join(matrix.legs.SUB_RTT_BSP, ',') }}
        run: |
          source ~/.env/env.sh
          python tools/ci/bsp_buildings.py
